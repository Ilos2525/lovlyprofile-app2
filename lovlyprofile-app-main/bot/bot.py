import firebase_admin
from firebase_admin import credentials, firestore

cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import os

# üîß –£–ª—É—á—à–µ–Ω–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render –∏ UptimeRobot
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'whylovly bot is running')

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

    def do_POST(self):
        self.send_response(200)
        self.end_headers()

    def log_message(self, format, *args):
        return  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞

def run_http_server():
    server = HTTPServer(('0.0.0.0', 8080), SimpleHandler)
    server.serve_forever()

# üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–æ—Ç–æ–º
threading.Thread(target=run_http_server, daemon=True).start()

# ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    chat_id = message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ Firebase (–≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "subscribers")
    db.collection("subscribers").document(str(chat_id)).set({
        "subscribed": True
    })

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ whylovly\n\n"
        "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É Blog —Ç—ã –ø–µ—Ä–µ–π–¥–µ—à—å –Ω–∞ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å, "
        "–≤ –Ω–µ–º —Ç—ã –Ω–∞–π–¥–µ—à—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –º—É–∑—ã–∫—É –∏ —Å–∫—Ä—ã—Ç—ã–π –∞—Ä—Ö–∏–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏.\n"
    )

@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer(
        "–í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º:\n\n"
        "2. –°–ª–æ–≤–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ, –≤–ø–∏—Å—ã–≤–∞–π –µ–≥–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n"
        "3. –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:\n"
        "–ë–µ–∑ –∫—Ä–∏–∫–∞ –∫—Ä–∏—á–∞—Ç, –±–µ–∑ —Å–ª–æ–≤ –≥–æ–≤–æ—Ä—è—Ç,\n"
        "–ù–∞ —â–µ–∫–∞—Ö –æ—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–ª—ë–Ω—ã–π —Å–ª–µ–¥.\n"
        "–ù–µ –∫—Ä–æ–≤—å, –Ω–µ –≤–æ–¥–∞ ‚Äî –Ω–æ –ø–∞–¥–∞—é—Ç –≤–Ω–∏–∑.\n\n"
        "–í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:\n"
        "–û–Ω –±–µ–∑ —Ü–≤–µ—Ç–∞, –±–µ–∑ –æ–≥–Ω—è,\n"
        "–ö–∞—Å–∞–µ—Ç—Å—è ‚Äî –∏ –Ω–µ—Ç —Ç–µ–ø–ª–∞.\n"
        "–ó–∞—Å—Ç–∞–≤–∏—Ç –∫–æ–∂—É –∑–∞–¥—Ä–æ–∂–∞—Ç—å,\n"
        "–ó–∏–º–æ–π –æ–Ω –ª—é–±–∏—Ç –Ω–∞–≤–µ—â–∞—Ç—å.\n\n"
        "–¢—Ä–µ—Ç—å–µ —Å–ª–æ–≤–æ:\n"
        "–†–µ–∞–ª—å–Ω–æ - ***** . –º–Ω–µ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ.\n\n"
        "–í–ø–∏—Å—ã–≤–∞–π –≤—Å–µ —Å–ª–æ–≤–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø—Ä–∏–º–µ—Ä–¢–µ—Å—Ç–ü–∞—Ä–æ–ª—å\n\n"
    )

import asyncio

async def notify_all_subscribers():
    message_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?\n"
        "–í –∞—Ä—Ö–∏–≤–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç ‚Äî –≥–ª—è–Ω—å, –º–æ–∂–µ—Ç, —á—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üòâ"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = db.collection("subscribers").stream()
        for doc in subscribers:
            chat_id = doc.id
            try:
                await bot.send_message(chat_id, message_text)
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {chat_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {chat_id}: {e}")
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Ä—É—á–Ω—É—é –≤—ã–∑–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:
    # asyncio.run(notify_all_subscribers())
